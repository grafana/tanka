{"version":3,"sources":["webpack:///./docs/jsonnet/injecting-values.md"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---docs-jsonnet-injecting-values-md-a2e9fadf417770db1b80.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/tanka/tanka/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"injecting-values\"\n    }}>{`Injecting Values`}</h1>\n    <p>{`Sometimes it might be required to pass externally acquired data into Jsonnet.`}</p>\n    <p>{`There are three ways of doing so:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#json-files\"\n        }}>{`JSON files`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#external-variables\"\n        }}>{`External variables`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#top-level-arguments\"\n        }}>{`Top level arguments`}</a></li>\n    </ol>\n    <p>{`Also check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://jsonnet.org/ref/language.html#passing-data-to-jsonnet\"\n      }}>{`official Jsonnet docs on this\ntopic`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"json-files\"\n    }}>{`JSON files`}</h2>\n    <p>{`Jsonnet is a superset of JSON, it treats any JSON as valid Jsonnet. Because many\nsystems can be told to output their data in JSON format, this provides a pretty\ngood interface between those.`}</p>\n    <p>{`For example, your build tooling like `}<inlineCode parentName=\"p\">{`make`}</inlineCode>{` could acquire secrets from systems such as\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.vaultproject.io/\"\n      }}>{`Vault`}</a>{`, etc. and write that into `}<inlineCode parentName=\"p\">{`secrets.json`}</inlineCode>{`.`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"jsonnet\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`local`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` secrets `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`=`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`import`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk6\"\n          }}>{`\"secrets.json\"`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`;`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`{`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`  `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`foo:`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` secrets.myPassword,`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong>{`: Using `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` with JSON treats it as Jsonnet, so make sure to not\nuse it with untrusted code.`}<br parentName=\"p\"></br>{`\n`}{`A safer, but more verbose, alternative is `}<inlineCode parentName=\"p\">{`std.parseJson(importstr 'path_to_json.json')`}</inlineCode></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"external-variables\"\n    }}>{`External variables`}</h2>\n    <p>{`Another way of passing values from the outside are external variables, which are specified like so:`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"bash\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`# strings`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`$ tk show `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk9\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` --ext-str hello=world`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`# any Jsonnet snippet`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`$ tk show `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk9\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` --ext-code foo=4 --ext-code bar=`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk5\"\n          }}>{`'`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk6\"\n          }}>{`[ 1, 3 ]`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk5\"\n          }}>{`'`}</span></span></code></pre>\n    <p>{`They can be accessed using `}<inlineCode parentName=\"p\">{`std.extVar`}</inlineCode>{` and the name given to them on the command line:`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"jsonnet\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`{`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`  `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`foo:`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` std.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk9\"\n          }}>{`extVar`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk6\"\n          }}>{`'foo'`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`), `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`// 4, integer`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`  `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`bar:`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` std.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk9\"\n          }}>{`extVar`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk6\"\n          }}>{`'bar'`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`), `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`// [ 1, 3 ], array`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Warning`}</strong>{`: External variables are directly accessible in all parts of the\nconfiguration, which can make it difficult to track where they are used and\nwhat effect they have on the final result.\nTry to use `}<a parentName=\"p\" {...{\n          \"href\": \"#top-level-arguments\"\n        }}>{`Top Level Arguments`}</a>{` instead.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"top-level-arguments\"\n    }}>{`Top Level Arguments`}</h2>\n    <p>{`Usually with Tanka, your `}<inlineCode parentName=\"p\">{`main.jsonnet`}</inlineCode>{` holds an object at the top level (most\nouter type in the generated JSON):`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"jsonnet\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`// main.jsonnet`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`{`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`  `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`/* your resources */`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <p>{`Another type of Jsonnet that naturally accepts parameters is the `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{`.\nWhen the Jsonnet compiler finds a function at the top level, it invokes it and\nallows passing parameter values from the command line:`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"jsonnet\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`// Actual output (object) returned by function, which is taking parameters and default values`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk9\"\n          }}>{`function`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(who, msg=`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk6\"\n          }}>{`\"Hello %s!\"`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`) {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`  `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`hello:`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` msg `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`%`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` who`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <p>{`Here, `}<inlineCode parentName=\"p\">{`who`}</inlineCode>{` needs a value while `}<inlineCode parentName=\"p\">{`msg`}</inlineCode>{` has a default. This can be invoked like so:`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"bash\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`$ tk show `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk9\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` --tla-str who=John`}</span></span></code></pre>\n\n    <style {...{\n      \"className\": \"vscode-highlight-styles\"\n    }}>{`\n  \n  .material-theme-darker {\nbackground-color: #212121;\ncolor: #EEFFFF;\n}\n\n.material-theme-darker .mtk1 { color: #FFFFFF; }\n.material-theme-darker .mtk2 { color: #212121; }\n.material-theme-darker .mtk3 { color: #545454; }\n.material-theme-darker .mtk4 { color: #F78C6C; }\n.material-theme-darker .mtk5 { color: #89DDFF; }\n.material-theme-darker .mtk6 { color: #C3E88D; }\n.material-theme-darker .mtk7 { color: #FFCB6B; }\n.material-theme-darker .mtk8 { color: #EEFFFF; }\n.material-theme-darker .mtk9 { color: #82AAFF; }\n.material-theme-darker .mtk10 { color: #FF5370; }\n.material-theme-darker .mtk11 { color: #F07178; }\n.material-theme-darker .mtk12 { color: #C792EA; }\n.material-theme-darker .mtk13 { color: #EEFFFF90; }\n.material-theme-darker .mtk14 { color: #65737E; }\n.material-theme-darker .mtk15 { color: #B2CCD6; }\n.material-theme-darker .mtk16 { color: #C17E70; }\n.material-theme-darker .mtki { font-style: italic; }\n.material-theme-darker .mtkb { font-weight: bold; }\n.material-theme-darker .mtku { text-decoration: underline; text-underline-position: under; }\n`}</style>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}