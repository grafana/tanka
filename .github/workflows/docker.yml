# See https://docs.docker.com/build/ci/github-actions/multi-platform/
name: Docker

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - edited
      - opened
      - ready_for_review
      - synchronize
    branches:
      - "*"
    paths-ignore:
      - "docs/**"
      - ".github/workflows/publish-page.yml"
  merge_group: {}
  workflow_call:
    inputs:
      tag:
        type: string
        required: true

permissions:
  contents: read
  id-token: write

env:
  REGISTRY_IMAGE: grafana/tanka
  # Docker image tags. See https://github.com/docker/metadata-action for format
  TAGS_CONFIG: |
    type=sha,prefix={{branch}}-,format=short,enable=${{ github.ref == 'refs/heads/main' }}
    type=raw,value=latest,enable=${{ inputs.tag != '' }}
    type=semver,pattern={{version}},value=${{ inputs.tag }},enable=${{ inputs.tag != '' }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-latest
          - github-hosted-ubuntu-arm64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ env.TAGS_CONFIG }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Login to DockerHub
        if: github.event_name == 'push'
        uses: grafana/shared-workflows/actions/dockerhub-login@main

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name == 'push' }}

      - name: Export digest
        id: digest
        if: github.event_name == 'push'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "artifact_name=digests-${{ matrix.platform }}" | sed -e 's/\//-/g' >> "$GITHUB_OUTPUT"

      - name: Upload digest
        if: github.event_name == 'push'
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ steps.digest.outputs.artifact_name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs:
      - build
    steps:
      - name: Download digests (linux/amd64)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: digests-github-hosted-ubuntu-arm64
          path: /tmp/digests-linux-amd64

      - name: Download digests (linux/arm64)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: digests-ubuntu-latest
          path: /tmp/digests-linux-arm64

      - name: Merge digests
        run: |
          mkdir -p /tmp/digests
          cp /tmp/digests-linux-amd64/* /tmp/digests/
          cp /tmp/digests-linux-arm64/* /tmp/digests/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ env.TAGS_CONFIG }}

      - name: Login to DockerHub
        uses: grafana/shared-workflows/actions/dockerhub-login@main

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
